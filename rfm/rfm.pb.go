// Code generated by protoc-gen-go.
// source: rfm.proto
// DO NOT EDIT!

/*
Package rfm is a generated protocol buffer package.

It is generated from these files:
	rfm.proto

It has these top-level messages:
	Request
	DirInfo
	DiskUsage
	FileInfo
*/
package rfm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Request struct {
	BaseDir string `protobuf:"bytes,1,opt,name=base_dir" json:"base_dir,omitempty"`
	Target  string `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DirInfo struct {
	Path      string      `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	DiskUsage *DiskUsage  `protobuf:"bytes,2,opt,name=disk_usage" json:"disk_usage,omitempty"`
	Items     []*FileInfo `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

func (m *DirInfo) Reset()                    { *m = DirInfo{} }
func (m *DirInfo) String() string            { return proto.CompactTextString(m) }
func (*DirInfo) ProtoMessage()               {}
func (*DirInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DirInfo) GetDiskUsage() *DiskUsage {
	if m != nil {
		return m.DiskUsage
	}
	return nil
}

func (m *DirInfo) GetItems() []*FileInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type DiskUsage struct {
	Size uint64 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	Free uint64 `protobuf:"varint,2,opt,name=free" json:"free,omitempty"`
}

func (m *DiskUsage) Reset()                    { *m = DiskUsage{} }
func (m *DiskUsage) String() string            { return proto.CompactTextString(m) }
func (*DiskUsage) ProtoMessage()               {}
func (*DiskUsage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type FileInfo struct {
	Name    string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Size    int64   `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Mode    uint32  `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
	ModTime float64 `protobuf:"fixed64,4,opt,name=mod_time" json:"mod_time,omitempty"`
	IsDir   bool    `protobuf:"varint,5,opt,name=is_dir" json:"is_dir,omitempty"`
	Owner   string  `protobuf:"bytes,6,opt,name=owner" json:"owner,omitempty"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Request)(nil), "rfm.Request")
	proto.RegisterType((*DirInfo)(nil), "rfm.DirInfo")
	proto.RegisterType((*DiskUsage)(nil), "rfm.DiskUsage")
	proto.RegisterType((*FileInfo)(nil), "rfm.FileInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for FS service

type FSClient interface {
	ReadDir(ctx context.Context, in *Request, opts ...grpc.CallOption) (*DirInfo, error)
}

type fSClient struct {
	cc *grpc.ClientConn
}

func NewFSClient(cc *grpc.ClientConn) FSClient {
	return &fSClient{cc}
}

func (c *fSClient) ReadDir(ctx context.Context, in *Request, opts ...grpc.CallOption) (*DirInfo, error) {
	out := new(DirInfo)
	err := grpc.Invoke(ctx, "/rfm.FS/ReadDir", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FS service

type FSServer interface {
	ReadDir(context.Context, *Request) (*DirInfo, error)
}

func RegisterFSServer(s *grpc.Server, srv FSServer) {
	s.RegisterService(&_FS_serviceDesc, srv)
}

func _FS_ReadDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(FSServer).ReadDir(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _FS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rfm.FS",
	HandlerType: (*FSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadDir",
			Handler:    _FS_ReadDir_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x44, 0x50, 0xcb, 0x4e, 0xc3, 0x30,
	0x10, 0x24, 0xcd, 0xa3, 0xc9, 0x92, 0x54, 0xc8, 0xa7, 0x08, 0x71, 0xa8, 0x7c, 0x69, 0x25, 0x44,
	0x0f, 0xe5, 0x17, 0xaa, 0x4a, 0x5c, 0x41, 0x1c, 0x38, 0x45, 0xae, 0xb2, 0x29, 0x16, 0x24, 0x2e,
	0xb6, 0x2b, 0x24, 0xbe, 0x9e, 0x5d, 0xe3, 0x8a, 0x9b, 0x67, 0x67, 0x3c, 0xbb, 0x33, 0x50, 0xd9,
	0x61, 0xdc, 0x9c, 0xac, 0xf1, 0x46, 0xa4, 0xf4, 0x94, 0xf7, 0x30, 0x7f, 0xc6, 0xaf, 0x33, 0x3a,
	0x2f, 0x6e, 0xa0, 0x3c, 0x28, 0x87, 0x5d, 0xaf, 0x6d, 0x9b, 0x2c, 0x93, 0x75, 0x25, 0x16, 0x50,
	0x78, 0x65, 0x8f, 0xe8, 0xdb, 0x19, 0x63, 0xf9, 0x06, 0xf3, 0x9d, 0xb6, 0x4f, 0xd3, 0x60, 0x44,
	0x0d, 0xd9, 0x49, 0xf9, 0xf7, 0x28, 0x94, 0x00, 0xbd, 0x76, 0x1f, 0xdd, 0xd9, 0xa9, 0x23, 0x06,
	0xf1, 0xf5, 0x76, 0xb1, 0xe1, 0x55, 0x3b, 0x1a, 0xbf, 0xf2, 0x54, 0xdc, 0x41, 0xae, 0x3d, 0x8e,
	0xae, 0x4d, 0x97, 0x29, 0xd1, 0x4d, 0xa0, 0xf7, 0xfa, 0x13, 0xd9, 0x4f, 0xae, 0xa0, 0xfa, 0x97,
	0x92, 0xb9, 0xd3, 0x3f, 0x18, 0xcc, 0x33, 0x46, 0x83, 0xc5, 0x3f, 0xdb, 0x4c, 0x22, 0x94, 0x97,
	0x4f, 0xcc, 0x4c, 0x6a, 0xc4, 0x78, 0xc4, 0xe5, 0x17, 0xeb, 0x52, 0x46, 0xa3, 0xe9, 0x91, 0xb6,
	0x25, 0xeb, 0x86, 0xb3, 0x11, 0xea, 0xbc, 0x26, 0x75, 0x46, 0x93, 0x84, 0xb3, 0x69, 0x17, 0xb2,
	0xe6, 0x84, 0x4b, 0xd1, 0x40, 0x6e, 0xbe, 0x27, 0xb4, 0x6d, 0xc1, 0x66, 0xdb, 0x07, 0x98, 0xed,
	0x5f, 0xc4, 0x8a, 0xdb, 0x51, 0x3d, 0x85, 0x16, 0x75, 0xb8, 0x37, 0x76, 0x75, 0x5b, 0xc7, 0x70,
	0xa1, 0x0c, 0x79, 0x75, 0x28, 0x42, 0xa5, 0x8f, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x39, 0x02,
	0xa5, 0x4f, 0x5f, 0x01, 0x00, 0x00,
}
